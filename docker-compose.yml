services:
  postgres:
    image: postgres:18.0-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - /var/lib/postgresql/data
    ports:
      - "6543:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  redis:
    image: redis:8.2.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    restart: unless-stopped

  discovery-service:
    build: ./discovery-service/
    image: discovery-service
    container_name: discovery-service
    ports:
      - "8761:8761"
    healthcheck:
      test: ["CMD-SHELL", "wget -O /dev/null http://localhost:8761/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  gateway-service:
    build: ./gateway-service/
    image: gateway_service
    container_name: gateway-service
    ports:
      - "8080:8080"
    depends_on:
      discovery-service:
        condition: service_healthy
    environment:
      EUREKA_URL: http://discovery-service:8761/eureka/
    healthcheck:
      test: [ "CMD-SHELL", "wget -O /dev/null http://localhost:8080/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  config-server:
    build: ./config-server/
    image: config-server
    container_name: config-server
    ports:
      - "8888:8888"
    depends_on:
      discovery-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -O /dev/null http://localhost:8888/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  user-service:
    build: ./user-service/
    image: user_service
    container_name: user-service
    ports:
      - "8090:8090"
    depends_on:
      postgres:
        condition: service_healthy
      config-server:
        condition: service_healthy
    environment:
      EUREKA_URL: http://discovery-service:8761/eureka/
#    healthcheck:
#      test: [ "CMD-SHELL", "wget -O /dev/null http://localhost:8090/actuator/health || exit 1" ]
#      interval: 10s
#      timeout: 10s
#      retries: 5
#      start_period: 30s
    restart: unless-stopped

  notificationService1:
    build: ./notification-service/
    image: notification_service
    container_name: mailsender_primary
    ports:
      - "8091:8091"
    depends_on:
      user-service:
        condition: service_started
    environment:
      SERVER_PORT: 8091
      EUREKA_URL: http://discovery-service:8761/eureka/
    restart: unless-stopped

  notificationService2:
    image: notification_service
    container_name: mailsender_second
    ports:
      - "8092:8092"
    depends_on:
      user-service:
        condition: service_started
    environment:
      SERVER_PORT: 8092
      EUREKA_URL: http://discovery-service:8761/eureka/
    restart: unless-stopped

  controller-1:
    image: apache/kafka-native:4.1.0
    container_name: controller-1
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  controller-2:
    image: apache/kafka-native:4.1.0
    container_name: controller-2
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  broker-1:
    image: apache/kafka-native:4.1.0
    container_name: broker-1
    ports:
      - "29092:9092"
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker-1:19092,PLAINTEXT_HOST://localhost:29092'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - controller-1
      - controller-2
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 9091 || exit 1" ]
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: unless-stopped
#
  broker-2:
    image: apache/kafka-native:4.1.0
    container_name: broker-2
    ports:
      - "39092:9092"
    environment:
      KAFKA_NODE_ID: 4
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker-2:19092,PLAINTEXT_HOST://localhost:39092'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - controller-1
      - controller-2
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 9091 || exit 1" ]
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: unless-stopped

  schema-registry:
    image: confluentinc/cp-schema-registry:8.0.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker-1
      - broker-2
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker-1:19092,broker-2:19092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  prometheus:
    image: prom/prometheus:v3.7.1
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - user-service
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboard-provisioning.yml:/etc/grafana/provisioning/dashboards/dashboard-provisioning.yml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    depends_on:
      - prometheus
    restart: unless-stopped

#  kafka-ui:
#    container_name: kafka_ui
#    hostname: kafka_ui
#    image: provectuslabs/kafka-ui:latest
#    depends_on:
#      - broker1
#      - broker2
#    ports:
#      - "8070:8080"
#    environment:
#      DYNAMIC_CONFIG_ENABLED: true


#networks:
#  aston:
#    driver: bridge